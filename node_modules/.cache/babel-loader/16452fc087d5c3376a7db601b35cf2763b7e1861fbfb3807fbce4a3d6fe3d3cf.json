{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaffe\\\\Videos\\\\Captures\\\\resume\\\\backend\\\\country-state-city-management\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport CountryList from './CountryList';\nimport StateList from './StateList';\nimport CityList from './CityList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState({}); // { countryName: [state1, state2, ...] }\n  const [cities, setCities] = useState({}); // { stateName: [city1, city2, ...] }\n\n  const handleAddCountry = newCountry => {\n    setCountries([...countries, newCountry]);\n    setStates({\n      ...states,\n      [newCountry]: []\n    });\n  };\n  const handleEditCountry = (oldCountry, newCountry) => {\n    setCountries(countries.map(country => country === oldCountry ? newCountry : country));\n    const newStates = {\n      ...states\n    };\n    newStates[newCountry] = newStates[oldCountry];\n    delete newStates[oldCountry];\n    setStates(newStates);\n  };\n  const handleDeleteCountry = countryToDelete => {\n    setCountries(countries.filter(country => country !== countryToDelete));\n    const newStates = {\n      ...states\n    };\n    delete newStates[countryToDelete];\n    setStates(newStates);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(CountryList, {\n          countries: countries,\n          onAddCountry: handleAddCountry,\n          onEditCountry: handleEditCountry,\n          onDeleteCountry: handleDeleteCountry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/states/:country\",\n        element: /*#__PURE__*/_jsxDEV(StateList, {\n          states: states,\n          setStates: setStates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/cities/:state\",\n        element: /*#__PURE__*/_jsxDEV(CityList, {\n          cities: cities,\n          setCities: setCities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"3zn0rll1Dz6CU6RrpYDVqfxi5PY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","CountryList","StateList","CityList","jsxDEV","_jsxDEV","App","_s","countries","setCountries","states","setStates","cities","setCities","handleAddCountry","newCountry","handleEditCountry","oldCountry","map","country","newStates","handleDeleteCountry","countryToDelete","filter","children","path","element","onAddCountry","onEditCountry","onDeleteCountry","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jaffe/Videos/Captures/resume/backend/country-state-city-management/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport CountryList from './CountryList';\nimport StateList from './StateList';\nimport CityList from './CityList';\n\nconst App = () => {\n    const [countries, setCountries] = useState([]);\n    const [states, setStates] = useState({}); // { countryName: [state1, state2, ...] }\n    const [cities, setCities] = useState({}); // { stateName: [city1, city2, ...] }\n\n    const handleAddCountry = (newCountry) => {\n        setCountries([...countries, newCountry]);\n        setStates({ ...states, [newCountry]: [] });\n    };\n\n    const handleEditCountry = (oldCountry, newCountry) => {\n        setCountries(countries.map(country => country === oldCountry ? newCountry : country));\n        const newStates = { ...states };\n        newStates[newCountry] = newStates[oldCountry];\n        delete newStates[oldCountry];\n        setStates(newStates);\n    };\n\n    const handleDeleteCountry = (countryToDelete) => {\n        setCountries(countries.filter(country => country !== countryToDelete));\n        const newStates = { ...states };\n        delete newStates[countryToDelete];\n        setStates(newStates);\n    };\n\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/\" element={\n                    <CountryList\n                        countries={countries}\n                        onAddCountry={handleAddCountry}\n                        onEditCountry={handleEditCountry}\n                        onDeleteCountry={handleDeleteCountry}\n                    />\n                } />\n                <Route path=\"/states/:country\" element={\n                    <StateList states={states} setStates={setStates} />\n                } />\n                <Route path=\"/cities/:state\" element={\n                    <CityList cities={cities} setCities={setCities} />\n                } />\n            </Routes>\n        </Router>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}